swagger: "2.0"

info:
  version: 1.0.0
  title:  mobile application API
  description: First Version Mobile API

schemes:
  - https
host: simple.api
basePath: http://acme-company.site

paths:
  /user/auth:
    post:
      summary: User authorization url
      parameters:
        - name: login
          in: body
          required: true
          description: Uniquie login for User
          type: string
        - name: pass
          in: body
          required: true
          description: User's password
          type: string
      responses:
        200:
          description: Succesful Login. Token returned
          schema:
            $ref: "#/definitions/Token"
        400:
          description: Incorrect login or password
          schema:
            $ref: "#/definitions/ErrorResponse"


  /user/logout:
    post:
      summary: User logout endpoint
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: '#/definitions/Token'
      responses:
        200:
          description: Succesful Logout.
        400:
          description: Incorrect token
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/get-info:
    post:
      summary: User request info about himself
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#definitions/Token"
      responses:
        200:
          description: Success. User info is returned
          schema:
            $ref: "#/definitions/User"
        400:
          description: Incorrect token.
          schema:
            $ref: "#/definitions/ErrorResponse"


  /parcels/get-list:
    post:
      summary: Gets list of parcels with some parameters. If no parameters was used, it would return all existing parcels.
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#definitions/Token"
        - name: status
          in: body
          description: Status of parcel.
          type: string
          enum: [Ok, Delayed]
        - name: region
          in: body
          description: Region that parcels is attached to
          type: string
        - name: parcels_id
          description: IDs of parcels that you want to request
          type: array
          items: 
            type: string
        - name: limit
          in: body
          description: Max number of retuned parcels
          type: number
        - name: offset
          in: body
          description: The size of offset
          type: number
      responses:
        200:
          description: A list of Parcels according to parameters returned.
          schema:
            $ref: '#/definitions/Parcels'
        400:
          description: Wrong Input
          schema:
            $ref: '#/definitions/ErrorResponse'
  
  /parcels/get-info:
    post:
      summary: Gets Info about specific parcel.
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#definitions/Token"
        - name: parcel_id
          in: body
          required: true
          desciption: parcel's unique ID
          type: string
      responses:
        200:
          description: OK. Full info about specific parcel is returned
          schema:
            $ref: '#/definitions/Parcel'
        400:
          description: Parcel with such ID wasn't found
          schema:
            $ref: '#/definitions/ErrorResponse'

  /customer/get-info:
    post:
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#definitions/Token"
        - name: customer_id
          in: body 
          required: true
          description: customer's uniquie ID
          type: string
      responses:
          200:
            description: Ok. Full info about specific customer is returned
            schema:
              $ref: '#/definitions/Customer'
          400:
            description: Customer with such ID wasn't found
            schema:
              $ref: '#/definitions/ErrorResponse'
  
  /driver/get-all:
    post:
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#/definitions/Token"
        - name: region
          in: body
          description: The region that user is attached to
          type: string
      responses:
          200:
            description: Ok. Array with drivers is returned
            schema:
              $ref: '#/definitions/Drivers'
          400:
            description: Wrong Input
            schema:
              $ref: '#/definitions/ErrorResponse'

  /driver/get-info:
    post:
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#/definitions/Token"
        - name: user_id
          in: body
          required: true
          type: string
          description: Driver's ID
      responses:
          200:
            description: Ok. Driver info is returned
            schema:
              $ref: '#/definitions/Driver'
          400:
            description: Wrong Input
            schema:
              $ref: '#/definitions/ErrorResponse'
  
  /driver/parcels:
    post:
      summary: Return parcels assigned to the specific driver
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#/definitions/Token"
        - name: user_id
          in: body
          required: true
          type: string
          description: Driver's ID
      responses:
          200:
            description: Ok. Array of parcels assgined to current driver is returned
            schema:
              $ref: '#/definitions/Parcels'
          400:
            description: Wrong Input
            schema:
              $ref: '#/definitions/ErrorResponse'

  #DATA CHANGING:
  #=================
  /parcels/assign:
    post:
      summary: Assign parcel to the specific driver
      parameters:
        - name: token
          in: body
          required: true
          schema:
            $ref: "#/definitions/Token"
        - name: parcelID
          in: body
          required: true
          type: string
        - name: userID
          in: body
          required: true
          type: string
          description: Driver's ID
      responses:
          200:
            description: Ok. Parcel was attached to driver
          400:
            description: Wrong Input
            schema:
              $ref: '#/definitions/ErrorResponse'
          


  #=================       



  /checkToken:
    post:
      summary: Check is the token valid. __DO WE NEED IT?__ #TODO DO WE NEED IT?
      parameters: 
        - name: Token
          required: true
          in: body
          description: Unique Token  for user
          schema:
            $ref: "#/definitions/Token"
      responses:
        200:
          description: Token Status returned
          schema:
            $ref: "#/definitions/TokenValidationResponse"
        400:
          description:  Wrong Token Input
          schema:
            $ref: "#/definitions/ErrorResponse"


  /changeParcelStatus: 
    post:
      summary: Change parcel status
      parameters: 
        - name: Token
          required: true
          in: body
          description: ID Unique for parcel
          type: string
        - name: ParcelStatus 
          required: true
          in: body
          description: Status from Enum
          schema:
            enum: [delivered, in progress,assigned,waited]
      responses:
        200:
          description: Parcel status was succesfully changed
        400:
          description:  Wrong Parcel ID or Status Input
  


definitions:
  
  Parcel:
    required:
      - parcelID
      - deliveryTime
      - address
      - contact
      - mapsCoordinate
    properties:
      parcelID:
        type: string
      deliveryTime:
        type: string
        format: date-time #TODO: Keep it in date-time format or make it just string?
      address:
        type: string
      contact:
        type: string
      mapsCoordinates:
        type: string
  
  Parcels:
    type: array
    items:
      $ref: '#/definitions/Parcel'
  
  Token:
    required:
      - token
    properties:
      token:
        description: unique token for user
        type: string
  
  User:
    properties:
      login:
        description: Unique login for user
        type: string
      name:
        description: User's Full Name
        type: string
      email:
        description: User's email
        type: string
      region:
        description: The region that user is attached to
        type: string
      id:
        descriprion: User's unique ID
        type: string
  
  Drivers:
    type: array
    items:
      $ref: '#/definitions/Driver'
  
  Driver:
    required:
      - driverID
    properties:
      driverID:
        type: string
      status:
        type: string
        enum: [Occupied, Free]
      assignedParcels:
        $ref: '#/definitions/Parcels'
      name:
        type: string
      photo:
        type: file
      number:
        description: telephone number
        type: string
      hoursWorked:
        type: string
        format: date-time #TODO: Keep it in date-time format or make it just string?  
  Customer:
    required:
      - id
    properties:
      id:
        description: Customer's unique ID
        type: string
      name:
        description: Customer's full name
        type: string
      telephone:
        description: Customer's telephone number
        type: number
      address:
        description: Customer's home address
        type: string



  ErrorResponse:
    required:
      - errorCode
    properties:
      errorCode:
        type: integer
      description:
        type: string
  
  TokenValidationResponse:
    required:
      - tokenStatus
    properties:
      tokenStatus:
        type: string #valid or not
      description:
        type: string
  